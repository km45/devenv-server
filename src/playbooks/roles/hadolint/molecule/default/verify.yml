---
- name: Verify
  hosts: all
  gather_facts: false
  tasks:
    - name: assert test environment
      block:
        - name: determine remote user
          ansible.builtin.command: whoami
          register: result
          changed_when: False
        - name: assert remote user
          assert:
            that:
              - result.stdout == "vagrant"
            fail_msg: "actual result is {{ result.stdout }}"
    - name: test command existence
      ansible.builtin.command: bash -c "type {{ item }}"
      register: result
      changed_when: False
      with_items:
        - hadolint
    - name: test run hadolint for Dockerfile which contains no problems
      block:
        - name: create temporary working directory
          ansible.builtin.tempfile:
            state: directory
          register: tmpdir
        - name: put Dockerfile
          ansible.builtin.copy:
            src: "OK.Dockerfile"
            dest: "{{ tmpdir.path }}/Dockerfile"
            mode: '0664'
        - name: run lint
          ansible.builtin.command: hadolint "{{ tmpdir.path }}/Dockerfile"
          changed_when: False
          failed_when: result.rc not in [0, 1]
          register: result
        - name: assert result
          assert:
            that:
              - result.rc == 0
            fail_msg: "actual result is {{ result }}"
    - name: test run hadolint for Dockerfile which contains problems
      block:
        - name: create temporary working directory
          ansible.builtin.tempfile:
            state: directory
          register: tmpdir
        - name: put Dockerfile
          ansible.builtin.copy:
            src: "NG.Dockerfile"
            dest: "{{ tmpdir.path }}/Dockerfile"
            mode: '0664'
        - name: run lint
          ansible.builtin.command: hadolint "{{ tmpdir.path }}/Dockerfile"
          changed_when: False
          failed_when: result.rc not in [0, 1]
          register: result
        - name: assert result
          assert:
            that:
              - result.rc == 1
              - result.stdout_lines | map('regex_search', '.* DL3008 .*') | select('string')
              - result.stdout_lines | map('regex_search', '.* DL3014 .*') | select('string')
              - result.stdout_lines | map('regex_search', '.* DL3015 .*') | select('string')
            fail_msg: "actual result is {{ result }}"
