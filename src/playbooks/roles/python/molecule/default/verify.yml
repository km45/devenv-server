---
- name: verify
  hosts: all
  tasks:
    - name: assert test environment
      block:
        - name: determine remote user
          ansible.builtin.command: whoami
          register: result
          changed_when: False
        - name: assert remote user
          assert:
            that:
              - result.stdout == "vagrant"
    - name: test command existence
      ansible.builtin.command: bash -c ". /home/vagrant/.bashrc.d/pyenv.bashrc && type {{ item }}"
      register: result
      changed_when: False
      with_items:
        - aws
        - cpplint
        - poetry
        - pyenv
    - name: test global python version
      block:
        - name: determine global python version
          ansible.builtin.command: bash -c ". /home/vagrant/.bashrc.d/pyenv.bashrc && python --version | sed 's|^Python ||g'"
          register: result
          changed_when: False
        - name: assert global python version
          assert:
            that:
              - result.stdout == "3.11.3"
            fail_msg: "actual version is {{ result.stdout }}"
    - name: test poetry version
      block:
        - name: determine poetry version
          ansible.builtin.command: bash -c ". /home/vagrant/.bashrc.d/pyenv.bashrc && poetry --version | sed 's|Poetry (version \([0-9\.]*\))|\1|g'"
          register: result
          changed_when: False
        - name: assert poetry version
          assert:
            that:
              - result.stdout is version('1.1.0', '>=')
              - result.stdout is version('2.0.0', '<')
            fail_msg: "actual version is {{ result.stdout }}"
    - name: test AWS CLI version
      block:
        - name: determine AWS CLI version
          ansible.builtin.command: bash -c ". /home/vagrant/.bashrc.d/pyenv.bashrc && aws --version | sed 's| |\n|g' | grep 'aws-cli' | sed 's|.*/||g'"
          register: result
          changed_when: False
        - name: assert AWS CLI version
          assert:
            that:
              - result.stdout is version('1.0.0', '>=')
              - result.stdout is version('2.0.0', '<')
            fail_msg: "actual version is {{ result.stdout }}"
